package com.library;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import javax.persistence.*;
import java.util.List;
import java.util.Optional;

@SpringBootApplication
public class LibraryManagementApplication {
    public static void main(String[] args) {
        SpringApplication.run(LibraryManagementApplication.class, args);
    }

    // --- ENTITY ---
    @Entity
    public static class Book {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        private String title;
        private String author;

        public Book() {}
        public Book(String title, String author) {
            this.title = title;
            this.author = author;
        }

        // Getters and Setters
        public Long getId() { return id; }
        public String getTitle() { return title; }
        public String getAuthor() { return author; }

        public void setId(Long id) { this.id = id; }
        public void setTitle(String title) { this.title = title; }
        public void setAuthor(String author) { this.author = author; }
    }

    // --- REPOSITORY ---
    @Repository
    public interface BookRepository extends JpaRepository<Book, Long> {}

    // --- CONTROLLER ---
    @RestController
    @RequestMapping("/books")
    public static class BookController {
        private final BookRepository bookRepo;

        public BookController(BookRepository bookRepo) {
            this.bookRepo = bookRepo;
        }

        @GetMapping
        public List<Book> getAllBooks() {
            return bookRepo.findAll();
        }

        @GetMapping("/{id}")
        public Optional<Book> getBook(@PathVariable Long id) {
            return bookRepo.findById(id);
        }

        @PostMapping
        public Book createBook(@RequestBody Book book) {
            return bookRepo.save(book);
        }

        @PutMapping("/{id}")
        public Book updateBook(@PathVariable Long id, @RequestBody Book book) {
            book.setId(id);
            return bookRepo.save(book);
        }

        @DeleteMapping("/{id}")
        public void deleteBook(@PathVariable Long id) {
            bookRepo.deleteById(id);
        }
    }
}
